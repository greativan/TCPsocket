#include <stdio.h>
#include <string.h>
#include "ftree.h"
#include <stdlib.h>
#include <netdb.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <libgen.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>

#ifndef PORT
  #define PORT 30000
#endif
static char dir_path[MAXPATH] = "";

int rcopy_client(char *source, char *host, unsigned short port){
    int soc;
    struct sockaddr_in sock;
    struct hostent *he;

    if ((he=gethostbyname(host)) == NULL) {  /* get the host info  */
        perror("gethostbyname");
        exit(1);
    }

    if ((soc = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("rcopy_client: sock");
        exit(1);
    }

    sock.sin_family = AF_INET;
    sock.sin_port = htons(PORT);
    sock.sin_addr = *((struct in_addr *)he->h_addr);


    if (connect(soc, (struct sockaddr *)&sock, sizeof(sock)) == -1) {
        perror("rcopy_client: connect");
        exit(1);
    }

    FILE *sourcefile = fopen(source, "rb");
    rewind(sourcefile);

    if (sourcefile == NULL) {
        perror("no such file");
        exit(1);
    }

    struct request client_file;

    struct stat source_buf;
    if ((lstat(source, &source_buf)) == -1){
        perror("source");
        exit(1);
    }

    if (S_ISREG(source_buf.st_mode)){


        //create struct type
        client_file.type = REGFILE;
        //create struct path
        //int path_size = strlen(basename(source));
        strcpy(client_file.path, basename(source));
        //create struct mode
        client_file.mode = source_buf.st_mode;
        //create struct hash
        strcpy(client_file.hash, hash(sourcefile));
        //create struct size
        client_file.size = source_buf.st_size;


        //sending components of struct to server        
        int32_t signal_1 = htonl(AWAITING_TYPE);
        write(soc, &signal_1, sizeof(int32_t));

        //send type
        int32_t f_type = htonl(client_file.type);
        write(soc, &f_type, sizeof(f_type));

        int32_t signal_2 = htonl(AWAITING_PATH);
        write(soc, (char*)&signal_2, sizeof(int32_t));
        

        //send path
        int sent_bytes = write(soc, client_file.path, MAXPATH);
        printf("%d\n", sent_bytes);

        int32_t signal_3 = htonl(AWAITING_PERM);
        write(soc, &signal_3, sizeof(int32_t));

        //send mode
        int32_t mode = htonl(client_file.mode);
        write(soc, &mode, sizeof(int32_t));

        int32_t signal_4 = htonl(AWAITING_HASH);
        write(soc, &signal_4, sizeof(int32_t));

        //send hash
        write(soc, client_file.hash, BLOCKSIZE);

        int32_t signal_5 = htonl(AWAITING_SIZE);
        write(soc, &signal_5, sizeof(int32_t));

        //send size
        int32_t f_size = htonl(client_file.size);
        write(soc, &f_size, sizeof(f_size));

        //the signal from server
        int32_t sig_from_sock;
        read(soc, &sig_from_sock, sizeof(int32_t));
        int check_signal = ntohl(sig_from_sock);
        
		  close(soc);
        //check signal
        if (check_signal == SENDFILE){
            //fork a new process, create a new client
            int result;

            result = fork();

            if (result == -1){
                perror("fork");
                exit(1);
            } else if (result > 0){ // parent
                int status;
                if (wait(&status) != -1) {
                    printf("waiting\n");
                }

            } else if (result == 0){ // child
                //create a new client
					 int soc_fork;
    				 struct sockaddr_in sock_fork;
    				 struct hostent *he_fork;

    				 if ((he_fork=gethostbyname(host)) == NULL) {  /* get the host info  */
        				 perror("gethostbyname");
        				 exit(1);
    				 }

    				 if ((soc_fork = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        				 perror("rcopy_client: sock");
        				 exit(1);
    				 }

    				 sock_fork.sin_family = AF_INET;
    				 sock_fork.sin_port = htons(PORT);
    				 sock_fork.sin_addr = *((struct in_addr *)he_fork->h_addr);


    				 if (connect(soc_fork, (struct sockaddr *)&sock_fork, sizeof(sock_fork)) == -1) {
        				 perror("rcopy_client: connect");
        				 exit(1);
    				 }
                //create struct type
        			 client_file.type = TRANSFILE;
        			 //create struct path
        			 //int path_size = strlen(basename(source));
        			 strcpy(client_file.path, basename(source));
        			 //create struct mode
        			 client_file.mode = source_buf.st_mode;
        			 //create struct hash
        			 strcpy(client_file.hash, hash(sourcefile));
        			 //create struct size
        			 client_file.size = source_buf.st_size;
					 
					 //sending components of struct to server        
            	 int32_t signal_1 = htonl(AWAITING_TYPE);
            	 write(soc_fork, (char*)&signal_1, sizeof(int32_t));

        			 //send type
        			 int32_t f_type = htonl(client_file.type);
        			 write(soc_fork, (char*)&f_type, sizeof(f_type));

            	 int32_t signal_2 = htonl(AWAITING_PATH);
            	 write(soc_fork, (char*)&signal_2, sizeof(int32_t));

        			 //send path
        			 write(soc_fork, client_file.path, MAXPATH);

            	 int32_t signal_3 = htonl(AWAITING_PERM);
            	 write(soc_fork, (char*)&signal_3, sizeof(int32_t));

        			 //send mode
        			 write(soc_fork, &client_file.mode, sizeof(mode_t));

            	 int32_t signal_4 = htonl(AWAITING_HASH);
            	 write(soc_fork, (char*)&signal_4, sizeof(int32_t));

        			 //send hash
        			 write(soc_fork, client_file.hash, BLOCKSIZE);

            	 int32_t signal_5 = htonl(AWAITING_SIZE);
            	 write(soc_fork, (char*)&signal_5, sizeof(int32_t));

        		 	 //send size
        			 int32_t f_size = htonl(client_file.size);
        			 write(soc_fork, (char*)&f_size, sizeof(f_size));

                //TRANSFERING FILE
                strcat(dir_path, source);
                FILE *sourcefile = fopen(dir_path, "rb");
                char buf;
                while(fread(&buf, 1, 1, sourcefile)){
                    write(soc_fork, &buf, 1);
                }
                if (fclose(sourcefile) < 0){
                    perror("fclose");
                    exit(1);
                }
                close(soc_fork);
               
            }

        } else if (check_signal == ERROR){
            fprintf(stderr, "error!");
            return ERROR;
        }


    } else if(S_ISDIR(source_buf.st_mode)){
    	
        //create struct type
        client_file.type = REGDIR;
        //create struct path
        //int path_size = strlen(basename(source));
        strcpy(client_file.path, basename(source));
        //strcat(client_file.path, "\0");
        //char *bsn = basename(source);
        //printf("source is %s\n", source);
        //printf("%s\n", client_file.path);
        //printf("bsn is %s\n", bsn);
        
        //client_file.path[path_size + 1] = '\0';
        //create struct mode
        client_file.mode = source_buf.st_mode;
        //the hash for a directory should be all null terminators
        char terminators[BLOCKSIZE] = {'\0'};
        strncpy(client_file.hash, terminators, BLOCKSIZE);
        //create struct size
        client_file.size = source_buf.st_size;

        //send signal and components of struct
		  //sending components of struct to server        
        int32_t signal_1 = htonl(AWAITING_TYPE);
        write(soc, &signal_1, sizeof(int32_t));

        //send type
        int32_t f_type = htonl(client_file.type);
        write(soc, &f_type, sizeof(f_type));

        int32_t signal_2 = htonl(AWAITING_PATH);
        write(soc, (char*)&signal_2, sizeof(int32_t));
        

        //send path
        write(soc, client_file.path, MAXPATH);
        printf("%s\n", client_file.path);

        int32_t signal_3 = htonl(AWAITING_PERM);
        write(soc, &signal_3, sizeof(int32_t));

        //send mode
        int32_t mode = htonl(client_file.mode);
        write(soc, &mode, sizeof(int32_t));

        int32_t signal_4 = htonl(AWAITING_HASH);
        write(soc, &signal_4, sizeof(int32_t));

        //send hash
        write(soc, client_file.hash, BLOCKSIZE);

        int32_t signal_5 = htonl(AWAITING_SIZE);
        write(soc, &signal_5, sizeof(int32_t));

        //send size
        int32_t f_size = htonl(client_file.size);
        write(soc, &f_size, sizeof(f_size));
        printf("%d\n", client_file.size);
        
        close(soc);
        
        
        
        DIR *dir = opendir(source);
        if (dir == NULL) {
		  		perror("opendir");
		  		exit(1);
        }
        
        struct dirent *dp;
        dp = readdir(dir);
        while(dp != NULL) {
        		if (dp -> d_name[0] != '.'){
        			char child_path[MAXPATH];
        			strcpy(child_path, source);
        			strcat(child_path, "/");
        			strcat(child_path, dp -> d_name);
        			strcat(child_path, "\0");
        			strcat(dir_path, client_file.path);
        			rcopy_client(child_path, host, port);
        			
        		}
        		dp = readdir(dir);
        }
        closedir(dir);
        close(soc);
    }

	 return 0;
}

int main(int argc, char **argv) {
    /* Note: In most cases, you'll want HOST to be localhost or 127.0.0.1, so 
     * you can test on your local machine.*/
    //char *dest;
    if (argc != 3) {
        printf("Usage:\n\trcopy_client SRC HOST\n");
        printf("\t SRC - The file or directory to copy to the server\n");
        printf("\t HOST - The hostname of the server");
        return 1;
    }

    if (rcopy_client(argv[1], argv[2], PORT) != 0) {
        printf("Errors encountered during copy\n");
        return 1;
    } else {
        printf("Copy completed successfully\n");
        return 0;
    }
}

